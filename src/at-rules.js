import {flatIter} from './helpers'
import {sheet} from './sheet'
import {declarations} from './declarations'

/**
 * Hanldes at-rules
 *
 * @param {string} k - The at-rule name, and, if takes both parameters and a
 *                     block, the parameters.
 * @param {string[]} emit - the contextual emitters to the final buffer
 * @param {string[]} v - Either parameters for block-less rules or their block
 *                       for the others.
 * @param {string} prefix - the current selector or a prefix in case of nested rules
 * @param {string} inAtRule - are we nested in an at-rule?
 * @param {boolean} local - are we in @local or in @global scope?
 * @param {function} state - @local helper
 */

export function atRules(k, v, emit, prefix, inAtRule, local, state) {
  k = /^(.(?:-[\w]+-)?([_A-Za-z][-\w]*))\b\s*(.*?)\s*$/.exec(k) || ['@','@','','']
  if (!k[3] && /^global$/.test(k[2])) {
    sheet(v, emit, prefix, inAtRule, 0, state)

  } else if (!k[3] && /^local$/.test(k[2])) {

    sheet(v, emit, prefix, inAtRule, 1, state)

  } else if (!k[3] && /^(?:namespace|import|charset)$/.test(k[2])) {
    flatIter(function(v) {

      emit.a(k[0], ' ', v, ';\n')

    })(v)

  } else if (!k[3] && /^(?:font-face|viewport)$/.test(k[2])) {
    flatIter(function(v) {

      emit.a(k[1], '', '', ' {\n')

      declarations(v, emit, '', local, state)

      emit.c('}\n')

    })(v)

  } else if (k[3] && /^(?:media|supports|page|keyframes)$/.test(k[2])) {

    if (local && 'keyframes' == k[2]) {
      k[3] = k[3].replace(
        // generated by script/regexps.js
        /:?global\(\s*([_A-Za-z][-\w]*)\s*\)|()(-?[_A-Za-z][-\w]*)/,
        state.l
      )
    }


    emit.a(k[1], ' ', k[3], ' {\n')

    if ('page' == k[2]) {

      declarations(v, emit, '', local, state)

    } else {

      sheet(v, emit, prefix, 0, local, state)

    }

    emit.c('}\n')

  } else {
    for (var i = 0; i < state.A.length; i++) {
      if (state.A[i](k, v, emit, prefix, inAtRule, local, state)) return
    }
    emit.a('@-error-unsupported-at-rule', ' ', JSON.stringify(k[0]), ';\n')

  }
}
