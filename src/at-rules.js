import {flatIter} from './helpers'
import {sheet} from './sheet'
import {declarations} from './declarations'

/**
 * Hanldes at-rules
 *
 * @param {string} k - The at-rule name, and, if takes both parameters and a
 *                     block, the parameters.
 * @param {string[]} emit - the contextual emitters to the final buffer
 * @param {string[]} v - Either parameters for block-less rules or their block
 *                       for the others.
 * @param {string} prefix - the current selector or a prefix in case of nested rules
 * @param {string} composes - the potential target of a @composes rule, if any
 * @param {boolean} local - are we in @local or in @global scope?
 * @param {function} localize - @local helper
 */

export function at(k, v, emit, prefix, composes, local, localize){
  var params
  if (/^.global$/.test(k)) {
    sheet(v, emit, prefix, 1, 0, localize)

  } else if (/^.local$/.test(k)) {

    sheet(v, emit, prefix, 1, 1, localize)

  } else if (/^.(?:-[\w]+-)?(?:namespace|import|charset)$/.test(k)) {
    flatIter(function(v) {

      emit.a(k, ' ', v, ';\n')

    })(v)

  } else if (/^.(?:-[\w]+-)?(?:font-face|viewport|swash|ornaments|annotation|stylistic|styleset|character-variant)$/.test(k)) {
    flatIter(function(v) {

      emit.a(k, '', '', ' {\n')

      declarations(v, emit, '', local, localize)

      emit.c('}\n')

    })(v)

  } else if (/^.(?:-[\w]+-)?(?:media|supports|document|page|keyframes|counter-style|font-feature-values)\b\s*(\S.*)/.test(k)) {

    params = k.match(/^.(?:-[\w]+-)?(?:media|supports|document|page|keyframes|counter-style|font-feature-values)\b\s*(\S.*)/)[1]

    k = k.match(/^.(?:-[\w]+-)?(?:media|supports|document|page|keyframes|counter-style|font-feature-values)/)[0]

    if (local && /^.(?:-[\w]+-)?(?:keyframes|counter-style)/.test(k)) {
      params = params.replace(
        // generated by script/regexps.js
        /:?global\(\s*([_A-Za-z][-\w]*)\s*\)|()(-?[_A-Za-z][-\w]*)/,
        localize
      )
    }


    emit.a(k, ' ', params, ' {\n')

    if (/.(?:-[\w]+-)?(?:page|counter-style)/.test(k)) {

      declarations(v, emit, '', local, localize)

    } else {

      sheet(v, emit, prefix, 1, local, localize)

    }

    emit.c('}\n')

  } else {

    emit.a('@-error-unsupported-at-rule', ' ', JSON.stringify(k), ';\n')

  }
}
