'use strict';

var emptyArray = [];
var emptyObject = {};
var type = emptyObject.toString;
var ARRAY =  type.call(emptyArray);
var OBJECT = type.call(emptyObject);
var STRING = type.call('');
var FUNCTION = type.call(type);
var own =  emptyObject.hasOwnProperty;
var freeze = Object.freeze || function(o) {return o};


function defaults(target, source) {
  for (var k in source) if (own.call(source, k)) {
    if (k.indexOf('$') && !(k in target)) target[k] = source[k];
  }
  return target
}

function cartesian(a,b) {
  var res = [], i, j;
  for (j in b) if(own.call(b, j))
    for (i in a) if(own.call(a, i))
      res.push(a[i] + b[j]);
  return res
}

// "Tokenizes" the selectors into parts relevant for the next function.
// Strings and comments are matched, but ignored afterwards.
// This is not a full tokenizers. It only recognizes comas, parentheses,
// strings and comments.
// regexp generated by scripts/regexps.js then trimmed by hand
var selectorTokenizer = /[(),]|"(?:\\.|[^"\n])*"|'(?:\\.|[^'\n])*'|\/\*[\s\S]*?\*\//g;


/**
 * This will split a coma-separated selector list into individual selectors,
 * ignoring comas in strings, comments and in :pseudo-selectors(parameter, lists).
 *
 * @param {string} selector
 * @return {string[]}
 */

function splitSelector(selector) {
  var indices = [], res = [], inParen = 0, o;
  /*eslint-disable no-cond-assign*/
  while (o = selectorTokenizer.exec(selector)) {
  /*eslint-enable no-cond-assign*/
    switch (o[0]) {
    case '(': inParen++; break
    case ')': inParen--; break
    case ',': if (inParen) break; indices.push(o.index);
    }
  }
  for (o = indices.length; o--;){
    res.unshift(selector.slice(indices[o] + 1));
    selector = selector.slice(0, indices[o]);
  }
  res.unshift(selector);
  return res
}

// Like the `selectorTokenizer`, but for the `&` operator
var ampersandTokenizer = /&|"(?:\\.|[^"\n])*"|'(?:\\.|[^'\n])*'|\/\*[\s\S]*?\*\//g;

function ampersand (selector, parents) {
  var indices = [], split = [], res, o;
  /*eslint-disable no-cond-assign*/
  while (o = ampersandTokenizer.exec(selector)) {
  /*eslint-enable no-cond-assign*/
    if (o[0] == '&') indices.push(o.index);
  }
  for (o = indices.length; o--;){
    split.unshift(selector.slice(indices[o] + 1));
    selector = selector.slice(0, indices[o]);
  }
  split.unshift(selector);
  if (split.length === 1) split.unshift('');
  res = [split[0]];
  for (o = 1; o < split.length; o++) {
    res = cartesian(res, cartesian(parents, [split[o]]));
  }
  return res.join(',')
}

function flatIter (f) {
  return function iter(arg) {
    if (type.call(arg) === ARRAY) for (var i= 0 ; i < arg.length; i ++) iter(arg[i]);
    else f(arg);
  }
}

function decamelize(match) {
  return '-' + match.toLowerCase()
}

/**
 * Handles the property:value; pairs.
 *
 * @param {object} state - holds the localizer- and walker-related methods
 *                         and state
 * @param {object} emit - the contextual emitters to the final buffer
 * @param {string} prefix - the current property or a prefix in case of nested
 *                          sub-properties.
 * @param {array|object|string} o - the declarations.
 * @param {boolean} local - are we in @local or in @global scope.
 */

function declarations(state, emit, prefix, o, local) {
  var k, v, kk;
  if (o==null) return

  switch ( type.call(o = o.valueOf()) ) {
  case ARRAY:
    for (k = 0; k < o.length; k++)

      declarations(state, emit, prefix, o[k], local);

    break
  case OBJECT:
    // prefix is falsy iif it is the empty string, which means we're at the root
    // of the declarations list.
    prefix = (prefix && prefix + '-');
    for (k in o) if (own.call(o, k)){
      v = o[k];
      if (/\$/.test(k)) {
        for (kk in (k = k.split('$'))) if (own.call(k, kk)) {

          declarations(state, emit, prefix + k[kk], v, local);

        }
      } else {

        declarations(state, emit, prefix + k, v, local);

      }
    }
    break
  default:
    // prefix is falsy when it is "", which means that we're
    // at the top level.
    // `o` is then treated as a `property:value` pair, or a
    // semi-colon-separated list thereof.
    // Otherwise, `prefix` is the property name, and
    // `o` is the value.

    // restore the dashes
    k = prefix.replace(/_/g, '-').replace(/[A-Z]/g, decamelize);

    if (local && (k == 'animation-name' || k == 'animation' || k == 'list-style')) {
      // no need to tokenize here a plain `.split(',')` has all bases covered.
      // We may 'localize' a comment, but it's not a big deal.
      o = o.split(',').map(function (o) {

        return o.replace(/^\s*(?:(var\([^)]+\))|:?global\(\s*([_A-Za-z][-\w]*)\s*\)|()(-?[_A-Za-z][-\w]*))/, state.localizeReplacer)

      }).join(',');
    }

    if(k) emit.decl(k, o);
    else emit.raw(o);

  }
}

/**
 * Handles a single at-rules
 *
 * @param {object} state - holds the localizer- and walker-related methods
 *                         and state
 * @param {object} emit - the contextual emitters to the final buffer
 * @param {array} k - The parsed at-rule, including the parameters,
 *                    if takes both parameters and a block.
 *                    k == [match, fullAtRule, atRuleType, params?]
 *                    So in `@-webkit-keyframes foo`, we have
 *                     - match = "@-webkit-keyframes foo"
 *                     - fullAtRule = "@-webkit-keyframes"
 *                     - atRuleType = "keyframes"
 *                     - params = "foo"
 * @param {string|string[]|object|object[]} v - Either parameters for
 *                                              block-less rules or
 *                                              their block
 *                                              for the others.
 * @param {string} prefix - the current selector or the selector prefix
 *                          in case of nested rules
 * @param {boolean} local - are we in @local or in @global scope?
 * @param {string} nestingDepth - are we nested in an at-rule or a selector?
 */

function atRules(state, emit, k, v, prefix, local, nestingDepth) {

  // First iterate over user-provided at-rules and return if one of them corresponds to the current one
  for (var i = 0; i < state.atruleHandlers.length; i++) {

    if (state.atruleHandlers[i](state, emit, k, v, prefix, local, nestingDepth)) return

  }

  // using `/^global$/.test(k[2])` rather that 'global' == k[2] gzips
  // slightly better thanks to the regexps tests further down.
  // It is slightly less efficient but this isn't a critical path.

  if (!k[3] && /^global$/.test(k[2])) {

    rules(state, emit, prefix, v, 0, nestingDepth);


  } else if (!k[3] && /^local$/.test(k[2])) {

    rules(state, emit, prefix, v, 1, nestingDepth);


  } else if (k[3] && /^adopt$/.test(k[2])) {

    if (!local || nestingDepth) return emit.err('@adopt global or nested: ' + k[0])

    if (!/^\.?[_A-Za-z][-\w]*$/.test(k[3])) return emit.err('bad adopter ' + JSON.stringify(k[3]) + ' in ' + k[0])

    i = [];
    flatIter(function(adoptee, asString) {

      if(adoptee == null || !/^\.?[_A-Za-z][-\w]*(?:\s+\.?[_A-Za-z][-\w]*)*$/.test(asString = adoptee + '')) emit.err('bad adoptee '+ JSON.stringify(adoptee) + ' in ' + k[0]);

      else i.push(asString.replace(/\./g, ''));

    })(v);

    // we may end up with duplicate classes but AFAIK it has no consequences on specificity.
    if (i.length) {
      state.localize(k[3] = k[3].replace(/\./g, ''));
      state.names[k[3]] += (' ' + i.join(' '));
    }


  } else if (!k[3] && /^(?:namespace|import|charset)$/.test(k[2])) {
    flatIter(function(v) {

      emit.atrule(k[1], k[2], v);

    })(v);


  } else if (!k[3] && /^(?:font-face|viewport)$/.test(k[2])) {
    flatIter(function(v) {

      emit.atrule(k[1], k[2], k[3], 'decl');

      declarations(state, emit, '', v, local);

      emit._atrule();

    })(v);

  } else if (k[3] && /^(?:media|supports|page|keyframes)$/.test(k[2])) {

    if (local && 'keyframes' == k[2]) {
      k[3] = k[3].replace(
        // generated by script/regexps.js
        /(var\([^)]+\))|:?global\(\s*([_A-Za-z][-\w]*)\s*\)|()(-?[_A-Za-z][-\w]*)/,
        state.localizeReplacer
      );
    }

    if ('page' == k[2]) {

      emit.atrule(k[1], k[2], k[3], 'decl');

      declarations(state, emit, '', v, local);

    } else {

      emit.atrule(k[1], k[2], k[3], 'rule');

      rules(
        state, emit,
        'keyframes' == k[2] ? '' : prefix,
        v, local, nestingDepth + 1
      );

    }

    emit._atrule();

  } else {

    emit.err('Unsupported at-rule: ' + k[0]);

  }
}

/**
 * Add rulesets and other CSS tree to the sheet.
 *
 * @param {object} state - holds the localizer- and walker-related methods
 *                         and state
 * @param {object} emit - the contextual emitters to the final buffer
 * @param {string} prefix - the current selector or a prefix in case of nested rules
 * @param {array|string|object} tree - a source object or sub-object.
 * @param {string} nestingDepth - are we nested in an at-rule?
 * @param {boolean} local - are we in @local or in @global scope?
 */
function rules(state, emit, prefix, tree, local, nestingDepth) {
  var k, v, inDeclaration, kk;

  switch (type.call(tree)) {

  case OBJECT:
    for (k in tree) if (own.call(tree, k)) {
      v = tree[k];

      if (prefix.length > 0 && /^[-\w$]+$/.test(k)) {
        if (!inDeclaration) {
          inDeclaration = 1;

          emit.rule(prefix);

        }
        if (/\$/.test(k)) {
          for (kk in (k = k.split('$'))) if (own.call(k, kk)) {

            declarations(state, emit, k[kk], v, local);

          }
        } else {

          declarations(state, emit, k, v, local);

        }

      } else if (/^@/.test(k)) {
        // Handle At-rules
        inDeclaration = 0;

        atRules(state, emit,
          /^(.(?:-[\w]+-)?([_A-Za-z][-\w]*))\b\s*(.*?)\s*$/.exec(k) || [k,'@','',''],
          v, prefix, local, nestingDepth
        );

      } else {
        // selector or nested sub-selectors
        inDeclaration = 0;

        rules(
          state, emit,
          // build the selector `prefix` for the next iteration.
          // ugly and full of redundant bits but so far the fastest/shortest.gz
          /*0 if*/(prefix.length > 0 && (/,/.test(prefix) || /,/.test(k))) ?

            /*0 then*/ (kk = splitSelector(prefix), splitSelector(
              local ?

                k.replace(
                  /("(?:\\.|[^"\n])*"|'(?:\\.|[^'\n])*'|\/\*[\s\S]*?\*\/)|:global\(\s*(\.-?[_A-Za-z][-\w]*)\s*\)|(\.)(-?[_A-Za-z][-\w]*)/g,
                  state.localizeReplacer
                ) :

                k
            ).map(function (k) {
              return /&/.test(k) ? ampersand(k, kk) : kk.map(function(kk) {
                return kk + k
              }).join(',')
            }).join(',')) :

            /*0 else*/ /*1 if*/ /&/.test(k) ?

              /*1 then*/ ampersand(
                local ?

                  k.replace(
                    /("(?:\\.|[^"\n])*"|'(?:\\.|[^'\n])*'|\/\*[\s\S]*?\*\/)|:global\(\s*(\.-?[_A-Za-z][-\w]*)\s*\)|(\.)(-?[_A-Za-z][-\w]*)/g,
                    state.localizeReplacer
                  ) :

                  k,
                [prefix]
              ) :

              /*1 else*/ prefix + (
                local ?

                  k.replace(
                    /("(?:\\.|[^"\n])*"|'(?:\\.|[^'\n])*'|\/\*[\s\S]*?\*\/)|:global\(\s*(\.-?[_A-Za-z][-\w]*)\s*\)|(\.)(-?[_A-Za-z][-\w]*)/g,
                    state.localizeReplacer
                  ) :

                  k
                ),
           v, local, nestingDepth + 1
        );

      }
    }

    break

  case ARRAY:
    for (k = 0; k < tree.length; k++){

      rules(state, emit, prefix, tree[k], local, nestingDepth);

    }
    break

  case STRING:
    // CSS hacks or ouptut of `j2c.inline`.

    if (prefix.length) emit.rule(prefix);

    emit.raw(tree);

  }
}

// This is the first entry in the filters array, which is
// actually the last step of the compiler. It inserts
// closing braces to close normal (non at-) rules (those
// that start with a selector). Doing it earlier is
// impossible without passing state around in unrelated code
// or ending up with duplicated selectors when the source tree
// contains arrays.
// There's no `_rule` handler, because the core compiler never
// calls it.
function closeSelectors(next, inline) {
  var lastSelector;
  return inline ? next : {
    init: function(){lastSelector = 0; next.init();},
    done: function (raw) {
      if (lastSelector) {next._rule(); lastSelector = 0;}
      return next.done(raw)
    },
    atrule: function (rule, kind, param, takesBlock) {
      if (lastSelector) {next._rule(); lastSelector = 0;}
      next.atrule(rule, kind, param, takesBlock);
    },
    _atrule: function (rule) {
      if (lastSelector) {next._rule(); lastSelector = 0;}
      next._atrule(rule);
    },
    rule: function (selector) {
      if (selector !== lastSelector){
        if (lastSelector) next._rule();
        next.rule(selector);
        lastSelector = selector;
      }
    }
  }
}

function global(x) {
  return ':global(' + x + ')'
}

function kv (k, v, o) {
  o = {};
  o[k] = v;
  return o
}

function at (rule, params, block) {
  if (
    arguments.length < 3
  ) {
    // inner curry!
    var _at = at.bind.apply(at, [null].concat([].slice.call(arguments,0)));
    // So that it can be used as a key in an ES6 object literal.
    _at.toString = function(){return '@' + rule + ' ' + params};
    return _at
  }
  else return kv('@' + rule +' ' + params, block)
}

function j2c() {

  // the buffer that accumulates the output. Initialized in `$sink.i()`
  var buf, err;

  // the bottom of the 'codegen' stream. Mirrors the `_filter` plugin API.
  var _backend = [{
    init: function(){buf=[], err=[];},
    done: function (raw) {
      if (err.length != 0) throw new Error('j2c error(s): ' + JSON.stringify(err,null,2) + 'in context:\n' + buf.join(''))
      return raw ? buf : buf.join('')
    },
    err: function(msg) {
      err.push(msg);
      buf.push('/* +++ ERROR +++ ' + msg + ' */\n');
    },
    raw: function(str) {buf.push(str, _instance.endline);},
    atrule: function (rule, kind, param, takesBlock) {
      buf.push(rule, param && ' ', param, takesBlock ? ' {' : ';', _instance.endline);
    },
    // close atrule
    _atrule: function () {buf.push('}', _instance.endline);},
    rule: function (selector) {buf.push(selector, ' {', _instance.endline);},
    // close rule
    _rule: function () {buf.push('}', _instance.endline);},
    decl: function (prop, value) {buf.push(prop, ':', value, ';', _instance.endline);}
  }];

  // holds the `_filter` and `atrule` handlers
  var _filters = [closeSelectors];
  var _atruleHandlers = [];

  // the public API (see the main docs)
  var _instance = {
    at: at,
    global: global,
    kv: kv,
    names: {},
    endline: '\n',
    suffix: '__j2c-' +
      // 128 bits of randomness
      Math.floor(Math.random() * 0x100000000).toString(36) + '-' +
      Math.floor(Math.random() * 0x100000000).toString(36) + '-' +
      Math.floor(Math.random() * 0x100000000).toString(36) + '-' +
      Math.floor(Math.random() * 0x100000000).toString(36),
    plugins: [],
    sheet: function(tree) {
      _backend[0].init();
      rules(
        _walkers[0],
        _backend[0],
        '', // prefix
        tree,
        1,  // local, by default
        0   // nesting depth
      );

      return _backend[0].done()
    },
    inline: function (tree, options) {
      _backend[1].init();
      declarations(
        _walkers[1],
        _backend[1],
        '', // prefix
        tree,
        !(options && options.global)   // local, by default
      );
      return _backend[1].done()
    }
  };

  // The `state` (for the core functions) / `walker` (for the plugins) tables.
  var _walkers = [
    // for j2c.sheet
    {
      // helpers for locaizing class and animation names
      localizeReplacer: _localizeReplacer, // second argument to String.prototype.replace
      localize: _localize,                 // mangles local names
      names: _instance.names,              // local => mangled mapping
      atruleHandlers: _atruleHandlers,            // extra at-rules
      // The core walker methods, to be provided to plugins
      atrule: atRules,
      decl: declarations,
      rule: rules
    },
    // likewise, for j2c.inline (idem with `$a`, `a` and `s` removed)
    {
      localizeReplacer: _localizeReplacer,
      localize: _localize,
      names: _instance.names,
      decl: declarations
    }
  ];

  /**
   * Returns a localized version of a given name.
   * Registers the pair in `instnace.name` if needed.
   *
   * @param {string} name - the name to localize
   * @return {string} - the localized version
   */
  function _localize(name) {
    if (!_instance.names[name]) _instance.names[name] = name + _instance.suffix;
    return _instance.names[name].match(/^\S+/)
  }

  /**
   * Used as second argument for str.replace(localizeRegex, replacer)
   * `ignore`, `global` and `(dot, name)` are mutually exclusive
   *
   * @param {string} match - the whole match (ignored)
   * @param {string|null} ignore - a comment or a string literal
   * @param {string|null} global - a global name
   * @param {string|null} dot - either '.' for a local class name or the empty string otherwise
   * @param {string|null} name - the name to localize
   * @return {string}
   */
  function _localizeReplacer(match, ignore, global$$1, dot, name) {
    return ignore || global$$1 || dot + _localize(name)
  }

  var _use = flatIter(function(plugin) {
    // `~n` is falsy for `n === -1` and truthy otherwise.
    // Works well to turn the  result of `a.indexOf(x)`
    // into a value that reflects the presence of `x` in
    // `a`.
    _instance.plugins.push(plugin);

    if (type.call(plugin) === FUNCTION) plugin = plugin(_instance);

    if (!plugin) return

    if (type.call(plugin.filter) === FUNCTION) _filters.push(plugin.filter);

    if (type.call(plugin.atrule) === FUNCTION) _atruleHandlers.push(plugin.atrule);

    if (type.call(plugin.sink) === FUNCTION) _backend = plugin.sink();

    if (type.call(plugin.names) === OBJECT) _instance.names = plugin.names;

    if (type.call(plugin.suffix) === STRING) _instance.suffix = plugin.suffix;

    if (type.call(plugin.plugins) === ARRAY) _use(plugin.plugins);

  });
  _use(emptyArray.slice.call(arguments));

  _backend[1] = _backend[1] || {
    init: _backend[0].init,
    done: _backend[0].done,
    raw: _backend[0].raw,
    err: _backend[0].err,
    decl: _backend[0].decl
  };

  // finalize the backend by merging in the filters
  for(var i = 0; i < 2; i++){ // 0 for j2c.sheet, 1 for j2c.inline
    for (var j = _filters.length; j--;) {
      _backend[i] = freeze(
        defaults(
          _filters[j](_backend[i], !!i),
          _backend[i]
        )
      );
    }
  }

  freeze(_instance);
  return _instance
}

module.exports = j2c;

//data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy9weWd5L2Rldi9qMmMvajJjL3NyYy9oZWxwZXJzLmpzIiwiL1VzZXJzL3B5Z3kvZGV2L2oyYy9qMmMvc3JjL2RlY2xhcmF0aW9ucy5qcyIsIi9Vc2Vycy9weWd5L2Rldi9qMmMvajJjL3NyYy9hdC1ydWxlcy5qcyIsIi9Vc2Vycy9weWd5L2Rldi9qMmMvajJjL3NyYy9ydWxlcy5qcyIsIi9Vc2Vycy9weWd5L2Rldi9qMmMvajJjL3NyYy9leHRyYXMuanMiLCIvVXNlcnMvcHlneS9kZXYvajJjL2oyYy9zcmMvbWFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXJcbiAgZW1wdHlBcnJheSA9IFtdLFxuICBlbXB0eU9iamVjdCA9IHt9LFxuICB0eXBlID0gZW1wdHlPYmplY3QudG9TdHJpbmcsXG4gIEFSUkFZID0gIHR5cGUuY2FsbChlbXB0eUFycmF5KSxcbiAgT0JKRUNUID0gdHlwZS5jYWxsKGVtcHR5T2JqZWN0KSxcbiAgU1RSSU5HID0gdHlwZS5jYWxsKCcnKSxcbiAgRlVOQ1RJT04gPSB0eXBlLmNhbGwodHlwZSksXG4gIG93biA9ICBlbXB0eU9iamVjdC5oYXNPd25Qcm9wZXJ0eSxcbiAgZnJlZXplID0gT2JqZWN0LmZyZWV6ZSB8fCBmdW5jdGlvbihvKSB7cmV0dXJuIG99XG5cblxuZnVuY3Rpb24gZGVmYXVsdHModGFyZ2V0LCBzb3VyY2UpIHtcbiAgZm9yICh2YXIgayBpbiBzb3VyY2UpIGlmIChvd24uY2FsbChzb3VyY2UsIGspKSB7XG4gICAgaWYgKGsuaW5kZXhPZignJCcpICYmICEoayBpbiB0YXJnZXQpKSB0YXJnZXRba10gPSBzb3VyY2Vba11cbiAgfVxuICByZXR1cm4gdGFyZ2V0XG59XG5cbmZ1bmN0aW9uIGNhcnRlc2lhbihhLGIpIHtcbiAgdmFyIHJlcyA9IFtdLCBpLCBqXG4gIGZvciAoaiBpbiBiKSBpZihvd24uY2FsbChiLCBqKSlcbiAgICBmb3IgKGkgaW4gYSkgaWYob3duLmNhbGwoYSwgaSkpXG4gICAgICByZXMucHVzaChhW2ldICsgYltqXSlcbiAgcmV0dXJuIHJlc1xufVxuXG4vLyBcIlRva2VuaXplc1wiIHRoZSBzZWxlY3RvcnMgaW50byBwYXJ0cyByZWxldmFudCBmb3IgdGhlIG5leHQgZnVuY3Rpb24uXG4vLyBTdHJpbmdzIGFuZCBjb21tZW50cyBhcmUgbWF0Y2hlZCwgYnV0IGlnbm9yZWQgYWZ0ZXJ3YXJkcy5cbi8vIFRoaXMgaXMgbm90IGEgZnVsbCB0b2tlbml6ZXJzLiBJdCBvbmx5IHJlY29nbml6ZXMgY29tYXMsIHBhcmVudGhlc2VzLFxuLy8gc3RyaW5ncyBhbmQgY29tbWVudHMuXG4vLyByZWdleHAgZ2VuZXJhdGVkIGJ5IHNjcmlwdHMvcmVnZXhwcy5qcyB0aGVuIHRyaW1tZWQgYnkgaGFuZFxudmFyIHNlbGVjdG9yVG9rZW5pemVyID0gL1soKSxdfFwiKD86XFxcXC58W15cIlxcbl0pKlwifCcoPzpcXFxcLnxbXidcXG5dKSonfFxcL1xcKltcXHNcXFNdKj9cXCpcXC8vZ1xuXG5cbi8qKlxuICogVGhpcyB3aWxsIHNwbGl0IGEgY29tYS1zZXBhcmF0ZWQgc2VsZWN0b3IgbGlzdCBpbnRvIGluZGl2aWR1YWwgc2VsZWN0b3JzLFxuICogaWdub3JpbmcgY29tYXMgaW4gc3RyaW5ncywgY29tbWVudHMgYW5kIGluIDpwc2V1ZG8tc2VsZWN0b3JzKHBhcmFtZXRlciwgbGlzdHMpLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvclxuICogQHJldHVybiB7c3RyaW5nW119XG4gKi9cblxuZnVuY3Rpb24gc3BsaXRTZWxlY3RvcihzZWxlY3Rvcikge1xuICB2YXIgaW5kaWNlcyA9IFtdLCByZXMgPSBbXSwgaW5QYXJlbiA9IDAsIG9cbiAgLyplc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiovXG4gIHdoaWxlIChvID0gc2VsZWN0b3JUb2tlbml6ZXIuZXhlYyhzZWxlY3RvcikpIHtcbiAgLyplc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduKi9cbiAgICBzd2l0Y2ggKG9bMF0pIHtcbiAgICBjYXNlICcoJzogaW5QYXJlbisrOyBicmVha1xuICAgIGNhc2UgJyknOiBpblBhcmVuLS07IGJyZWFrXG4gICAgY2FzZSAnLCc6IGlmIChpblBhcmVuKSBicmVhazsgaW5kaWNlcy5wdXNoKG8uaW5kZXgpXG4gICAgfVxuICB9XG4gIGZvciAobyA9IGluZGljZXMubGVuZ3RoOyBvLS07KXtcbiAgICByZXMudW5zaGlmdChzZWxlY3Rvci5zbGljZShpbmRpY2VzW29dICsgMSkpXG4gICAgc2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSgwLCBpbmRpY2VzW29dKVxuICB9XG4gIHJlcy51bnNoaWZ0KHNlbGVjdG9yKVxuICByZXR1cm4gcmVzXG59XG5cbi8vIExpa2UgdGhlIGBzZWxlY3RvclRva2VuaXplcmAsIGJ1dCBmb3IgdGhlIGAmYCBvcGVyYXRvclxudmFyIGFtcGVyc2FuZFRva2VuaXplciA9IC8mfFwiKD86XFxcXC58W15cIlxcbl0pKlwifCcoPzpcXFxcLnxbXidcXG5dKSonfFxcL1xcKltcXHNcXFNdKj9cXCpcXC8vZ1xuXG5mdW5jdGlvbiBhbXBlcnNhbmQgKHNlbGVjdG9yLCBwYXJlbnRzKSB7XG4gIHZhciBpbmRpY2VzID0gW10sIHNwbGl0ID0gW10sIHJlcywgb1xuICAvKmVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduKi9cbiAgd2hpbGUgKG8gPSBhbXBlcnNhbmRUb2tlbml6ZXIuZXhlYyhzZWxlY3RvcikpIHtcbiAgLyplc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduKi9cbiAgICBpZiAob1swXSA9PSAnJicpIGluZGljZXMucHVzaChvLmluZGV4KVxuICB9XG4gIGZvciAobyA9IGluZGljZXMubGVuZ3RoOyBvLS07KXtcbiAgICBzcGxpdC51bnNoaWZ0KHNlbGVjdG9yLnNsaWNlKGluZGljZXNbb10gKyAxKSlcbiAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKDAsIGluZGljZXNbb10pXG4gIH1cbiAgc3BsaXQudW5zaGlmdChzZWxlY3RvcilcbiAgaWYgKHNwbGl0Lmxlbmd0aCA9PT0gMSkgc3BsaXQudW5zaGlmdCgnJylcbiAgcmVzID0gW3NwbGl0WzBdXVxuICBmb3IgKG8gPSAxOyBvIDwgc3BsaXQubGVuZ3RoOyBvKyspIHtcbiAgICByZXMgPSBjYXJ0ZXNpYW4ocmVzLCBjYXJ0ZXNpYW4ocGFyZW50cywgW3NwbGl0W29dXSkpXG4gIH1cbiAgcmV0dXJuIHJlcy5qb2luKCcsJylcbn1cblxuZnVuY3Rpb24gZmxhdEl0ZXIgKGYpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGl0ZXIoYXJnKSB7XG4gICAgaWYgKHR5cGUuY2FsbChhcmcpID09PSBBUlJBWSkgZm9yICh2YXIgaT0gMCA7IGkgPCBhcmcubGVuZ3RoOyBpICsrKSBpdGVyKGFyZ1tpXSlcbiAgICBlbHNlIGYoYXJnKVxuICB9XG59XG5cbmV4cG9ydCB7XG4gIEFSUkFZLCBGVU5DVElPTiwgT0JKRUNULCBTVFJJTkcsXG4gIGFtcGVyc2FuZCwgY2FydGVzaWFuLCBkZWZhdWx0cyxcbiAgZW1wdHlBcnJheSwgZW1wdHlPYmplY3QsXG4gIGZsYXRJdGVyLCBmcmVlemUsIG93bixcbiAgc3BsaXRTZWxlY3RvciwgdHlwZVxufSIsImltcG9ydCB7b3duLCB0eXBlLCBBUlJBWSwgT0JKRUNUfSBmcm9tICcuL2hlbHBlcnMnXG5cbmZ1bmN0aW9uIGRlY2FtZWxpemUobWF0Y2gpIHtcbiAgcmV0dXJuICctJyArIG1hdGNoLnRvTG93ZXJDYXNlKClcbn1cblxuLyoqXG4gKiBIYW5kbGVzIHRoZSBwcm9wZXJ0eTp2YWx1ZTsgcGFpcnMuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHN0YXRlIC0gaG9sZHMgdGhlIGxvY2FsaXplci0gYW5kIHdhbGtlci1yZWxhdGVkIG1ldGhvZHNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBzdGF0ZVxuICogQHBhcmFtIHtvYmplY3R9IGVtaXQgLSB0aGUgY29udGV4dHVhbCBlbWl0dGVycyB0byB0aGUgZmluYWwgYnVmZmVyXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJlZml4IC0gdGhlIGN1cnJlbnQgcHJvcGVydHkgb3IgYSBwcmVmaXggaW4gY2FzZSBvZiBuZXN0ZWRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICBzdWItcHJvcGVydGllcy5cbiAqIEBwYXJhbSB7YXJyYXl8b2JqZWN0fHN0cmluZ30gbyAtIHRoZSBkZWNsYXJhdGlvbnMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGxvY2FsIC0gYXJlIHdlIGluIEBsb2NhbCBvciBpbiBAZ2xvYmFsIHNjb3BlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNsYXJhdGlvbnMoc3RhdGUsIGVtaXQsIHByZWZpeCwgbywgbG9jYWwpIHtcbiAgdmFyIGssIHYsIGtrXG4gIGlmIChvPT1udWxsKSByZXR1cm5cblxuICBzd2l0Y2ggKCB0eXBlLmNhbGwobyA9IG8udmFsdWVPZigpKSApIHtcbiAgY2FzZSBBUlJBWTpcbiAgICBmb3IgKGsgPSAwOyBrIDwgby5sZW5ndGg7IGsrKylcblxuICAgICAgZGVjbGFyYXRpb25zKHN0YXRlLCBlbWl0LCBwcmVmaXgsIG9ba10sIGxvY2FsKVxuXG4gICAgYnJlYWtcbiAgY2FzZSBPQkpFQ1Q6XG4gICAgLy8gcHJlZml4IGlzIGZhbHN5IGlpZiBpdCBpcyB0aGUgZW1wdHkgc3RyaW5nLCB3aGljaCBtZWFucyB3ZSdyZSBhdCB0aGUgcm9vdFxuICAgIC8vIG9mIHRoZSBkZWNsYXJhdGlvbnMgbGlzdC5cbiAgICBwcmVmaXggPSAocHJlZml4ICYmIHByZWZpeCArICctJylcbiAgICBmb3IgKGsgaW4gbykgaWYgKG93bi5jYWxsKG8sIGspKXtcbiAgICAgIHYgPSBvW2tdXG4gICAgICBpZiAoL1xcJC8udGVzdChrKSkge1xuICAgICAgICBmb3IgKGtrIGluIChrID0gay5zcGxpdCgnJCcpKSkgaWYgKG93bi5jYWxsKGssIGtrKSkge1xuXG4gICAgICAgICAgZGVjbGFyYXRpb25zKHN0YXRlLCBlbWl0LCBwcmVmaXggKyBrW2trXSwgdiwgbG9jYWwpXG5cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcblxuICAgICAgICBkZWNsYXJhdGlvbnMoc3RhdGUsIGVtaXQsIHByZWZpeCArIGssIHYsIGxvY2FsKVxuXG4gICAgICB9XG4gICAgfVxuICAgIGJyZWFrXG4gIGRlZmF1bHQ6XG4gICAgLy8gcHJlZml4IGlzIGZhbHN5IHdoZW4gaXQgaXMgXCJcIiwgd2hpY2ggbWVhbnMgdGhhdCB3ZSdyZVxuICAgIC8vIGF0IHRoZSB0b3AgbGV2ZWwuXG4gICAgLy8gYG9gIGlzIHRoZW4gdHJlYXRlZCBhcyBhIGBwcm9wZXJ0eTp2YWx1ZWAgcGFpciwgb3IgYVxuICAgIC8vIHNlbWktY29sb24tc2VwYXJhdGVkIGxpc3QgdGhlcmVvZi5cbiAgICAvLyBPdGhlcndpc2UsIGBwcmVmaXhgIGlzIHRoZSBwcm9wZXJ0eSBuYW1lLCBhbmRcbiAgICAvLyBgb2AgaXMgdGhlIHZhbHVlLlxuXG4gICAgLy8gcmVzdG9yZSB0aGUgZGFzaGVzXG4gICAgayA9IHByZWZpeC5yZXBsYWNlKC9fL2csICctJykucmVwbGFjZSgvW0EtWl0vZywgZGVjYW1lbGl6ZSlcblxuICAgIGlmIChsb2NhbCAmJiAoayA9PSAnYW5pbWF0aW9uLW5hbWUnIHx8IGsgPT0gJ2FuaW1hdGlvbicgfHwgayA9PSAnbGlzdC1zdHlsZScpKSB7XG4gICAgICAvLyBubyBuZWVkIHRvIHRva2VuaXplIGhlcmUgYSBwbGFpbiBgLnNwbGl0KCcsJylgIGhhcyBhbGwgYmFzZXMgY292ZXJlZC5cbiAgICAgIC8vIFdlIG1heSAnbG9jYWxpemUnIGEgY29tbWVudCwgYnV0IGl0J3Mgbm90IGEgYmlnIGRlYWwuXG4gICAgICBvID0gby5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiAobykge1xuXG4gICAgICAgIHJldHVybiBvLnJlcGxhY2UoL15cXHMqKD86KHZhclxcKFteKV0rXFwpKXw6P2dsb2JhbFxcKFxccyooW19BLVphLXpdWy1cXHddKilcXHMqXFwpfCgpKC0/W19BLVphLXpdWy1cXHddKikpLywgc3RhdGUubG9jYWxpemVSZXBsYWNlcilcblxuICAgICAgfSkuam9pbignLCcpXG4gICAgfVxuXG4gICAgaWYoaykgZW1pdC5kZWNsKGssIG8pXG4gICAgZWxzZSBlbWl0LnJhdyhvKVxuXG4gIH1cbn1cbiIsImltcG9ydCB7ZmxhdEl0ZXJ9IGZyb20gJy4vaGVscGVycydcbmltcG9ydCB7cnVsZXN9IGZyb20gJy4vcnVsZXMnXG5pbXBvcnQge2RlY2xhcmF0aW9uc30gZnJvbSAnLi9kZWNsYXJhdGlvbnMnXG5cbi8qKlxuICogSGFuZGxlcyBhIHNpbmdsZSBhdC1ydWxlc1xuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0ZSAtIGhvbGRzIHRoZSBsb2NhbGl6ZXItIGFuZCB3YWxrZXItcmVsYXRlZCBtZXRob2RzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgc3RhdGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBlbWl0IC0gdGhlIGNvbnRleHR1YWwgZW1pdHRlcnMgdG8gdGhlIGZpbmFsIGJ1ZmZlclxuICogQHBhcmFtIHthcnJheX0gayAtIFRoZSBwYXJzZWQgYXQtcnVsZSwgaW5jbHVkaW5nIHRoZSBwYXJhbWV0ZXJzLFxuICogICAgICAgICAgICAgICAgICAgIGlmIHRha2VzIGJvdGggcGFyYW1ldGVycyBhbmQgYSBibG9jay5cbiAqICAgICAgICAgICAgICAgICAgICBrID09IFttYXRjaCwgZnVsbEF0UnVsZSwgYXRSdWxlVHlwZSwgcGFyYW1zP11cbiAqICAgICAgICAgICAgICAgICAgICBTbyBpbiBgQC13ZWJraXQta2V5ZnJhbWVzIGZvb2AsIHdlIGhhdmVcbiAqICAgICAgICAgICAgICAgICAgICAgLSBtYXRjaCA9IFwiQC13ZWJraXQta2V5ZnJhbWVzIGZvb1wiXG4gKiAgICAgICAgICAgICAgICAgICAgIC0gZnVsbEF0UnVsZSA9IFwiQC13ZWJraXQta2V5ZnJhbWVzXCJcbiAqICAgICAgICAgICAgICAgICAgICAgLSBhdFJ1bGVUeXBlID0gXCJrZXlmcmFtZXNcIlxuICogICAgICAgICAgICAgICAgICAgICAtIHBhcmFtcyA9IFwiZm9vXCJcbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfG9iamVjdHxvYmplY3RbXX0gdiAtIEVpdGhlciBwYXJhbWV0ZXJzIGZvclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2stbGVzcyBydWxlcyBvclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlaXIgYmxvY2tcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0aGUgb3RoZXJzLlxuICogQHBhcmFtIHtzdHJpbmd9IHByZWZpeCAtIHRoZSBjdXJyZW50IHNlbGVjdG9yIG9yIHRoZSBzZWxlY3RvciBwcmVmaXhcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICBpbiBjYXNlIG9mIG5lc3RlZCBydWxlc1xuICogQHBhcmFtIHtib29sZWFufSBsb2NhbCAtIGFyZSB3ZSBpbiBAbG9jYWwgb3IgaW4gQGdsb2JhbCBzY29wZT9cbiAqIEBwYXJhbSB7c3RyaW5nfSBuZXN0aW5nRGVwdGggLSBhcmUgd2UgbmVzdGVkIGluIGFuIGF0LXJ1bGUgb3IgYSBzZWxlY3Rvcj9cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYXRSdWxlcyhzdGF0ZSwgZW1pdCwgaywgdiwgcHJlZml4LCBsb2NhbCwgbmVzdGluZ0RlcHRoKSB7XG5cbiAgLy8gRmlyc3QgaXRlcmF0ZSBvdmVyIHVzZXItcHJvdmlkZWQgYXQtcnVsZXMgYW5kIHJldHVybiBpZiBvbmUgb2YgdGhlbSBjb3JyZXNwb25kcyB0byB0aGUgY3VycmVudCBvbmVcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZS5hdHJ1bGVIYW5kbGVycy5sZW5ndGg7IGkrKykge1xuXG4gICAgaWYgKHN0YXRlLmF0cnVsZUhhbmRsZXJzW2ldKHN0YXRlLCBlbWl0LCBrLCB2LCBwcmVmaXgsIGxvY2FsLCBuZXN0aW5nRGVwdGgpKSByZXR1cm5cblxuICB9XG5cbiAgLy8gdXNpbmcgYC9eZ2xvYmFsJC8udGVzdChrWzJdKWAgcmF0aGVyIHRoYXQgJ2dsb2JhbCcgPT0ga1syXSBnemlwc1xuICAvLyBzbGlnaHRseSBiZXR0ZXIgdGhhbmtzIHRvIHRoZSByZWdleHBzIHRlc3RzIGZ1cnRoZXIgZG93bi5cbiAgLy8gSXQgaXMgc2xpZ2h0bHkgbGVzcyBlZmZpY2llbnQgYnV0IHRoaXMgaXNuJ3QgYSBjcml0aWNhbCBwYXRoLlxuXG4gIGlmICgha1szXSAmJiAvXmdsb2JhbCQvLnRlc3Qoa1syXSkpIHtcblxuICAgIHJ1bGVzKHN0YXRlLCBlbWl0LCBwcmVmaXgsIHYsIDAsIG5lc3RpbmdEZXB0aClcblxuXG4gIH0gZWxzZSBpZiAoIWtbM10gJiYgL15sb2NhbCQvLnRlc3Qoa1syXSkpIHtcblxuICAgIHJ1bGVzKHN0YXRlLCBlbWl0LCBwcmVmaXgsIHYsIDEsIG5lc3RpbmdEZXB0aClcblxuXG4gIH0gZWxzZSBpZiAoa1szXSAmJiAvXmFkb3B0JC8udGVzdChrWzJdKSkge1xuXG4gICAgaWYgKCFsb2NhbCB8fCBuZXN0aW5nRGVwdGgpIHJldHVybiBlbWl0LmVycignQGFkb3B0IGdsb2JhbCBvciBuZXN0ZWQ6ICcgKyBrWzBdKVxuXG4gICAgaWYgKCEvXlxcLj9bX0EtWmEtel1bLVxcd10qJC8udGVzdChrWzNdKSkgcmV0dXJuIGVtaXQuZXJyKCdiYWQgYWRvcHRlciAnICsgSlNPTi5zdHJpbmdpZnkoa1szXSkgKyAnIGluICcgKyBrWzBdKVxuXG4gICAgaSA9IFtdXG4gICAgZmxhdEl0ZXIoZnVuY3Rpb24oYWRvcHRlZSwgYXNTdHJpbmcpIHtcblxuICAgICAgaWYoYWRvcHRlZSA9PSBudWxsIHx8ICEvXlxcLj9bX0EtWmEtel1bLVxcd10qKD86XFxzK1xcLj9bX0EtWmEtel1bLVxcd10qKSokLy50ZXN0KGFzU3RyaW5nID0gYWRvcHRlZSArICcnKSkgZW1pdC5lcnIoJ2JhZCBhZG9wdGVlICcrIEpTT04uc3RyaW5naWZ5KGFkb3B0ZWUpICsgJyBpbiAnICsga1swXSlcblxuICAgICAgZWxzZSBpLnB1c2goYXNTdHJpbmcucmVwbGFjZSgvXFwuL2csICcnKSlcblxuICAgIH0pKHYpXG5cbiAgICAvLyB3ZSBtYXkgZW5kIHVwIHdpdGggZHVwbGljYXRlIGNsYXNzZXMgYnV0IEFGQUlLIGl0IGhhcyBubyBjb25zZXF1ZW5jZXMgb24gc3BlY2lmaWNpdHkuXG4gICAgaWYgKGkubGVuZ3RoKSB7XG4gICAgICBzdGF0ZS5sb2NhbGl6ZShrWzNdID0ga1szXS5yZXBsYWNlKC9cXC4vZywgJycpKVxuICAgICAgc3RhdGUubmFtZXNba1szXV0gKz0gKCcgJyArIGkuam9pbignICcpKVxuICAgIH1cblxuXG4gIH0gZWxzZSBpZiAoIWtbM10gJiYgL14oPzpuYW1lc3BhY2V8aW1wb3J0fGNoYXJzZXQpJC8udGVzdChrWzJdKSkge1xuICAgIGZsYXRJdGVyKGZ1bmN0aW9uKHYpIHtcblxuICAgICAgZW1pdC5hdHJ1bGUoa1sxXSwga1syXSwgdilcblxuICAgIH0pKHYpXG5cblxuICB9IGVsc2UgaWYgKCFrWzNdICYmIC9eKD86Zm9udC1mYWNlfHZpZXdwb3J0KSQvLnRlc3Qoa1syXSkpIHtcbiAgICBmbGF0SXRlcihmdW5jdGlvbih2KSB7XG5cbiAgICAgIGVtaXQuYXRydWxlKGtbMV0sIGtbMl0sIGtbM10sICdkZWNsJylcblxuICAgICAgZGVjbGFyYXRpb25zKHN0YXRlLCBlbWl0LCAnJywgdiwgbG9jYWwpXG5cbiAgICAgIGVtaXQuX2F0cnVsZSgpXG5cbiAgICB9KSh2KVxuXG4gIH0gZWxzZSBpZiAoa1szXSAmJiAvXig/Om1lZGlhfHN1cHBvcnRzfHBhZ2V8a2V5ZnJhbWVzKSQvLnRlc3Qoa1syXSkpIHtcblxuICAgIGlmIChsb2NhbCAmJiAna2V5ZnJhbWVzJyA9PSBrWzJdKSB7XG4gICAgICBrWzNdID0ga1szXS5yZXBsYWNlKFxuICAgICAgICAvLyBnZW5lcmF0ZWQgYnkgc2NyaXB0L3JlZ2V4cHMuanNcbiAgICAgICAgLyh2YXJcXChbXildK1xcKSl8Oj9nbG9iYWxcXChcXHMqKFtfQS1aYS16XVstXFx3XSopXFxzKlxcKXwoKSgtP1tfQS1aYS16XVstXFx3XSopLyxcbiAgICAgICAgc3RhdGUubG9jYWxpemVSZXBsYWNlclxuICAgICAgKVxuICAgIH1cblxuICAgIGlmICgncGFnZScgPT0ga1syXSkge1xuXG4gICAgICBlbWl0LmF0cnVsZShrWzFdLCBrWzJdLCBrWzNdLCAnZGVjbCcpXG5cbiAgICAgIGRlY2xhcmF0aW9ucyhzdGF0ZSwgZW1pdCwgJycsIHYsIGxvY2FsKVxuXG4gICAgfSBlbHNlIHtcblxuICAgICAgZW1pdC5hdHJ1bGUoa1sxXSwga1syXSwga1szXSwgJ3J1bGUnKVxuXG4gICAgICBydWxlcyhcbiAgICAgICAgc3RhdGUsIGVtaXQsXG4gICAgICAgICdrZXlmcmFtZXMnID09IGtbMl0gPyAnJyA6IHByZWZpeCxcbiAgICAgICAgdiwgbG9jYWwsIG5lc3RpbmdEZXB0aCArIDFcbiAgICAgIClcblxuICAgIH1cblxuICAgIGVtaXQuX2F0cnVsZSgpXG5cbiAgfSBlbHNlIHtcblxuICAgIGVtaXQuZXJyKCdVbnN1cHBvcnRlZCBhdC1ydWxlOiAnICsga1swXSlcblxuICB9XG59XG4iLCJpbXBvcnQge3R5cGUsIEFSUkFZLCBPQkpFQ1QsIFNUUklORywgYW1wZXJzYW5kLCBvd24sIHNwbGl0U2VsZWN0b3J9IGZyb20gJy4vaGVscGVycydcbmltcG9ydCB7ZGVjbGFyYXRpb25zfSBmcm9tICcuL2RlY2xhcmF0aW9ucydcbmltcG9ydCB7YXRSdWxlc30gZnJvbSAnLi9hdC1ydWxlcydcblxuLyoqXG4gKiBBZGQgcnVsZXNldHMgYW5kIG90aGVyIENTUyB0cmVlIHRvIHRoZSBzaGVldC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gc3RhdGUgLSBob2xkcyB0aGUgbG9jYWxpemVyLSBhbmQgd2Fsa2VyLXJlbGF0ZWQgbWV0aG9kc1xuICogICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHN0YXRlXG4gKiBAcGFyYW0ge29iamVjdH0gZW1pdCAtIHRoZSBjb250ZXh0dWFsIGVtaXR0ZXJzIHRvIHRoZSBmaW5hbCBidWZmZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcmVmaXggLSB0aGUgY3VycmVudCBzZWxlY3RvciBvciBhIHByZWZpeCBpbiBjYXNlIG9mIG5lc3RlZCBydWxlc1xuICogQHBhcmFtIHthcnJheXxzdHJpbmd8b2JqZWN0fSB0cmVlIC0gYSBzb3VyY2Ugb2JqZWN0IG9yIHN1Yi1vYmplY3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmVzdGluZ0RlcHRoIC0gYXJlIHdlIG5lc3RlZCBpbiBhbiBhdC1ydWxlP1xuICogQHBhcmFtIHtib29sZWFufSBsb2NhbCAtIGFyZSB3ZSBpbiBAbG9jYWwgb3IgaW4gQGdsb2JhbCBzY29wZT9cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVzKHN0YXRlLCBlbWl0LCBwcmVmaXgsIHRyZWUsIGxvY2FsLCBuZXN0aW5nRGVwdGgpIHtcbiAgdmFyIGssIHYsIGluRGVjbGFyYXRpb24sIGtrXG5cbiAgc3dpdGNoICh0eXBlLmNhbGwodHJlZSkpIHtcblxuICBjYXNlIE9CSkVDVDpcbiAgICBmb3IgKGsgaW4gdHJlZSkgaWYgKG93bi5jYWxsKHRyZWUsIGspKSB7XG4gICAgICB2ID0gdHJlZVtrXVxuXG4gICAgICBpZiAocHJlZml4Lmxlbmd0aCA+IDAgJiYgL15bLVxcdyRdKyQvLnRlc3QoaykpIHtcbiAgICAgICAgaWYgKCFpbkRlY2xhcmF0aW9uKSB7XG4gICAgICAgICAgaW5EZWNsYXJhdGlvbiA9IDFcblxuICAgICAgICAgIGVtaXQucnVsZShwcmVmaXgpXG5cbiAgICAgICAgfVxuICAgICAgICBpZiAoL1xcJC8udGVzdChrKSkge1xuICAgICAgICAgIGZvciAoa2sgaW4gKGsgPSBrLnNwbGl0KCckJykpKSBpZiAob3duLmNhbGwoaywga2spKSB7XG5cbiAgICAgICAgICAgIGRlY2xhcmF0aW9ucyhzdGF0ZSwgZW1pdCwga1tra10sIHYsIGxvY2FsKVxuXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgZGVjbGFyYXRpb25zKHN0YXRlLCBlbWl0LCBrLCB2LCBsb2NhbClcblxuICAgICAgICB9XG5cbiAgICAgIH0gZWxzZSBpZiAoL15ALy50ZXN0KGspKSB7XG4gICAgICAgIC8vIEhhbmRsZSBBdC1ydWxlc1xuICAgICAgICBpbkRlY2xhcmF0aW9uID0gMFxuXG4gICAgICAgIGF0UnVsZXMoc3RhdGUsIGVtaXQsXG4gICAgICAgICAgL14oLig/Oi1bXFx3XSstKT8oW19BLVphLXpdWy1cXHddKikpXFxiXFxzKiguKj8pXFxzKiQvLmV4ZWMoaykgfHwgW2ssJ0AnLCcnLCcnXSxcbiAgICAgICAgICB2LCBwcmVmaXgsIGxvY2FsLCBuZXN0aW5nRGVwdGhcbiAgICAgICAgKVxuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBzZWxlY3RvciBvciBuZXN0ZWQgc3ViLXNlbGVjdG9yc1xuICAgICAgICBpbkRlY2xhcmF0aW9uID0gMFxuXG4gICAgICAgIHJ1bGVzKFxuICAgICAgICAgIHN0YXRlLCBlbWl0LFxuICAgICAgICAgIC8vIGJ1aWxkIHRoZSBzZWxlY3RvciBgcHJlZml4YCBmb3IgdGhlIG5leHQgaXRlcmF0aW9uLlxuICAgICAgICAgIC8vIHVnbHkgYW5kIGZ1bGwgb2YgcmVkdW5kYW50IGJpdHMgYnV0IHNvIGZhciB0aGUgZmFzdGVzdC9zaG9ydGVzdC5nelxuICAgICAgICAgIC8qMCBpZiovKHByZWZpeC5sZW5ndGggPiAwICYmICgvLC8udGVzdChwcmVmaXgpIHx8IC8sLy50ZXN0KGspKSkgP1xuXG4gICAgICAgICAgICAvKjAgdGhlbiovIChrayA9IHNwbGl0U2VsZWN0b3IocHJlZml4KSwgc3BsaXRTZWxlY3RvcihcbiAgICAgICAgICAgICAgbG9jYWwgP1xuXG4gICAgICAgICAgICAgICAgay5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgLyhcIig/OlxcXFwufFteXCJcXG5dKSpcInwnKD86XFxcXC58W14nXFxuXSkqJ3xcXC9cXCpbXFxzXFxTXSo/XFwqXFwvKXw6Z2xvYmFsXFwoXFxzKihcXC4tP1tfQS1aYS16XVstXFx3XSopXFxzKlxcKXwoXFwuKSgtP1tfQS1aYS16XVstXFx3XSopL2csXG4gICAgICAgICAgICAgICAgICBzdGF0ZS5sb2NhbGl6ZVJlcGxhY2VyXG4gICAgICAgICAgICAgICAgKSA6XG5cbiAgICAgICAgICAgICAgICBrXG4gICAgICAgICAgICApLm1hcChmdW5jdGlvbiAoaykge1xuICAgICAgICAgICAgICByZXR1cm4gLyYvLnRlc3QoaykgPyBhbXBlcnNhbmQoaywga2spIDoga2subWFwKGZ1bmN0aW9uKGtrKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGtrICsga1xuICAgICAgICAgICAgICB9KS5qb2luKCcsJylcbiAgICAgICAgICAgIH0pLmpvaW4oJywnKSkgOlxuXG4gICAgICAgICAgICAvKjAgZWxzZSovIC8qMSBpZiovIC8mLy50ZXN0KGspID9cblxuICAgICAgICAgICAgICAvKjEgdGhlbiovIGFtcGVyc2FuZChcbiAgICAgICAgICAgICAgICBsb2NhbCA/XG5cbiAgICAgICAgICAgICAgICAgIGsucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgICAgLyhcIig/OlxcXFwufFteXCJcXG5dKSpcInwnKD86XFxcXC58W14nXFxuXSkqJ3xcXC9cXCpbXFxzXFxTXSo/XFwqXFwvKXw6Z2xvYmFsXFwoXFxzKihcXC4tP1tfQS1aYS16XVstXFx3XSopXFxzKlxcKXwoXFwuKSgtP1tfQS1aYS16XVstXFx3XSopL2csXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmxvY2FsaXplUmVwbGFjZXJcbiAgICAgICAgICAgICAgICAgICkgOlxuXG4gICAgICAgICAgICAgICAgICBrLFxuICAgICAgICAgICAgICAgIFtwcmVmaXhdXG4gICAgICAgICAgICAgICkgOlxuXG4gICAgICAgICAgICAgIC8qMSBlbHNlKi8gcHJlZml4ICsgKFxuICAgICAgICAgICAgICAgIGxvY2FsID9cblxuICAgICAgICAgICAgICAgICAgay5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICAvKFwiKD86XFxcXC58W15cIlxcbl0pKlwifCcoPzpcXFxcLnxbXidcXG5dKSonfFxcL1xcKltcXHNcXFNdKj9cXCpcXC8pfDpnbG9iYWxcXChcXHMqKFxcLi0/W19BLVphLXpdWy1cXHddKilcXHMqXFwpfChcXC4pKC0/W19BLVphLXpdWy1cXHddKikvZyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUubG9jYWxpemVSZXBsYWNlclxuICAgICAgICAgICAgICAgICAgKSA6XG5cbiAgICAgICAgICAgICAgICAgIGtcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICB2LCBsb2NhbCwgbmVzdGluZ0RlcHRoICsgMVxuICAgICAgICApXG5cbiAgICAgIH1cbiAgICB9XG5cbiAgICBicmVha1xuXG4gIGNhc2UgQVJSQVk6XG4gICAgZm9yIChrID0gMDsgayA8IHRyZWUubGVuZ3RoOyBrKyspe1xuXG4gICAgICBydWxlcyhzdGF0ZSwgZW1pdCwgcHJlZml4LCB0cmVlW2tdLCBsb2NhbCwgbmVzdGluZ0RlcHRoKVxuXG4gICAgfVxuICAgIGJyZWFrXG5cbiAgY2FzZSBTVFJJTkc6XG4gICAgLy8gQ1NTIGhhY2tzIG9yIG91cHR1dCBvZiBgajJjLmlubGluZWAuXG5cbiAgICBpZiAocHJlZml4Lmxlbmd0aCkgZW1pdC5ydWxlKHByZWZpeClcblxuICAgIGVtaXQucmF3KHRyZWUpXG5cbiAgfVxufVxuXG4vLyBUaGlzIGlzIHRoZSBmaXJzdCBlbnRyeSBpbiB0aGUgZmlsdGVycyBhcnJheSwgd2hpY2ggaXNcbi8vIGFjdHVhbGx5IHRoZSBsYXN0IHN0ZXAgb2YgdGhlIGNvbXBpbGVyLiBJdCBpbnNlcnRzXG4vLyBjbG9zaW5nIGJyYWNlcyB0byBjbG9zZSBub3JtYWwgKG5vbiBhdC0pIHJ1bGVzICh0aG9zZVxuLy8gdGhhdCBzdGFydCB3aXRoIGEgc2VsZWN0b3IpLiBEb2luZyBpdCBlYXJsaWVyIGlzXG4vLyBpbXBvc3NpYmxlIHdpdGhvdXQgcGFzc2luZyBzdGF0ZSBhcm91bmQgaW4gdW5yZWxhdGVkIGNvZGVcbi8vIG9yIGVuZGluZyB1cCB3aXRoIGR1cGxpY2F0ZWQgc2VsZWN0b3JzIHdoZW4gdGhlIHNvdXJjZSB0cmVlXG4vLyBjb250YWlucyBhcnJheXMuXG4vLyBUaGVyZSdzIG5vIGBfcnVsZWAgaGFuZGxlciwgYmVjYXVzZSB0aGUgY29yZSBjb21waWxlciBuZXZlclxuLy8gY2FsbHMgaXQuXG5leHBvcnQgZnVuY3Rpb24gY2xvc2VTZWxlY3RvcnMobmV4dCwgaW5saW5lKSB7XG4gIHZhciBsYXN0U2VsZWN0b3JcbiAgcmV0dXJuIGlubGluZSA/IG5leHQgOiB7XG4gICAgaW5pdDogZnVuY3Rpb24oKXtsYXN0U2VsZWN0b3IgPSAwOyBuZXh0LmluaXQoKX0sXG4gICAgZG9uZTogZnVuY3Rpb24gKHJhdykge1xuICAgICAgaWYgKGxhc3RTZWxlY3Rvcikge25leHQuX3J1bGUoKTsgbGFzdFNlbGVjdG9yID0gMH1cbiAgICAgIHJldHVybiBuZXh0LmRvbmUocmF3KVxuICAgIH0sXG4gICAgYXRydWxlOiBmdW5jdGlvbiAocnVsZSwga2luZCwgcGFyYW0sIHRha2VzQmxvY2spIHtcbiAgICAgIGlmIChsYXN0U2VsZWN0b3IpIHtuZXh0Ll9ydWxlKCk7IGxhc3RTZWxlY3RvciA9IDB9XG4gICAgICBuZXh0LmF0cnVsZShydWxlLCBraW5kLCBwYXJhbSwgdGFrZXNCbG9jaylcbiAgICB9LFxuICAgIF9hdHJ1bGU6IGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICBpZiAobGFzdFNlbGVjdG9yKSB7bmV4dC5fcnVsZSgpOyBsYXN0U2VsZWN0b3IgPSAwfVxuICAgICAgbmV4dC5fYXRydWxlKHJ1bGUpXG4gICAgfSxcbiAgICBydWxlOiBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChzZWxlY3RvciAhPT0gbGFzdFNlbGVjdG9yKXtcbiAgICAgICAgaWYgKGxhc3RTZWxlY3RvcikgbmV4dC5fcnVsZSgpXG4gICAgICAgIG5leHQucnVsZShzZWxlY3RvcilcbiAgICAgICAgbGFzdFNlbGVjdG9yID0gc2VsZWN0b3JcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBnbG9iYWwoeCkge1xuICByZXR1cm4gJzpnbG9iYWwoJyArIHggKyAnKSdcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGt2IChrLCB2LCBvKSB7XG4gIG8gPSB7fVxuICBvW2tdID0gdlxuICByZXR1cm4gb1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXQgKHJ1bGUsIHBhcmFtcywgYmxvY2spIHtcbiAgaWYgKFxuICAgIGFyZ3VtZW50cy5sZW5ndGggPCAzXG4gICkge1xuICAgIC8vIGlubmVyIGN1cnJ5IVxuICAgIHZhciBfYXQgPSBhdC5iaW5kLmFwcGx5KGF0LCBbbnVsbF0uY29uY2F0KFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLDApKSlcbiAgICAvLyBTbyB0aGF0IGl0IGNhbiBiZSB1c2VkIGFzIGEga2V5IGluIGFuIEVTNiBvYmplY3QgbGl0ZXJhbC5cbiAgICBfYXQudG9TdHJpbmcgPSBmdW5jdGlvbigpe3JldHVybiAnQCcgKyBydWxlICsgJyAnICsgcGFyYW1zfVxuICAgIHJldHVybiBfYXRcbiAgfVxuICBlbHNlIHJldHVybiBrdignQCcgKyBydWxlICsnICcgKyBwYXJhbXMsIGJsb2NrKVxufSIsImltcG9ydCB7ZGVmYXVsdHMsIGVtcHR5QXJyYXksIGZsYXRJdGVyLCBmcmVlemUsIHR5cGUsIEFSUkFZLCBGVU5DVElPTiwgT0JKRUNULCBTVFJJTkd9IGZyb20gJy4vaGVscGVycydcbmltcG9ydCB7Y2xvc2VTZWxlY3RvcnMsIHJ1bGVzfSBmcm9tICcuL3J1bGVzJ1xuaW1wb3J0IHtkZWNsYXJhdGlvbnN9IGZyb20gJy4vZGVjbGFyYXRpb25zJ1xuaW1wb3J0IHthdFJ1bGVzfSBmcm9tICcuL2F0LXJ1bGVzJ1xuaW1wb3J0IHthdCwgZ2xvYmFsLCBrdn0gZnJvbSAnLi9leHRyYXMnXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gajJjKCkge1xuXG4gIC8vIHRoZSBidWZmZXIgdGhhdCBhY2N1bXVsYXRlcyB0aGUgb3V0cHV0LiBJbml0aWFsaXplZCBpbiBgJHNpbmsuaSgpYFxuICB2YXIgYnVmLCBlcnJcblxuICAvLyB0aGUgYm90dG9tIG9mIHRoZSAnY29kZWdlbicgc3RyZWFtLiBNaXJyb3JzIHRoZSBgX2ZpbHRlcmAgcGx1Z2luIEFQSS5cbiAgdmFyIF9iYWNrZW5kID0gW3tcbiAgICBpbml0OiBmdW5jdGlvbigpe2J1Zj1bXSwgZXJyPVtdfSxcbiAgICBkb25lOiBmdW5jdGlvbiAocmF3KSB7XG4gICAgICBpZiAoZXJyLmxlbmd0aCAhPSAwKSB0aHJvdyBuZXcgRXJyb3IoJ2oyYyBlcnJvcihzKTogJyArIEpTT04uc3RyaW5naWZ5KGVycixudWxsLDIpICsgJ2luIGNvbnRleHQ6XFxuJyArIGJ1Zi5qb2luKCcnKSlcbiAgICAgIHJldHVybiByYXcgPyBidWYgOiBidWYuam9pbignJylcbiAgICB9LFxuICAgIGVycjogZnVuY3Rpb24obXNnKSB7XG4gICAgICBlcnIucHVzaChtc2cpXG4gICAgICBidWYucHVzaCgnLyogKysrIEVSUk9SICsrKyAnICsgbXNnICsgJyAqL1xcbicpXG4gICAgfSxcbiAgICByYXc6IGZ1bmN0aW9uKHN0cikge2J1Zi5wdXNoKHN0ciwgX2luc3RhbmNlLmVuZGxpbmUpfSxcbiAgICBhdHJ1bGU6IGZ1bmN0aW9uIChydWxlLCBraW5kLCBwYXJhbSwgdGFrZXNCbG9jaykge1xuICAgICAgYnVmLnB1c2gocnVsZSwgcGFyYW0gJiYgJyAnLCBwYXJhbSwgdGFrZXNCbG9jayA/ICcgeycgOiAnOycsIF9pbnN0YW5jZS5lbmRsaW5lKVxuICAgIH0sXG4gICAgLy8gY2xvc2UgYXRydWxlXG4gICAgX2F0cnVsZTogZnVuY3Rpb24gKCkge2J1Zi5wdXNoKCd9JywgX2luc3RhbmNlLmVuZGxpbmUpfSxcbiAgICBydWxlOiBmdW5jdGlvbiAoc2VsZWN0b3IpIHtidWYucHVzaChzZWxlY3RvciwgJyB7JywgX2luc3RhbmNlLmVuZGxpbmUpfSxcbiAgICAvLyBjbG9zZSBydWxlXG4gICAgX3J1bGU6IGZ1bmN0aW9uICgpIHtidWYucHVzaCgnfScsIF9pbnN0YW5jZS5lbmRsaW5lKX0sXG4gICAgZGVjbDogZnVuY3Rpb24gKHByb3AsIHZhbHVlKSB7YnVmLnB1c2gocHJvcCwgJzonLCB2YWx1ZSwgJzsnLCBfaW5zdGFuY2UuZW5kbGluZSl9XG4gIH1dXG5cbiAgLy8gaG9sZHMgdGhlIGBfZmlsdGVyYCBhbmQgYGF0cnVsZWAgaGFuZGxlcnNcbiAgdmFyIF9maWx0ZXJzID0gW2Nsb3NlU2VsZWN0b3JzXVxuICB2YXIgX2F0cnVsZUhhbmRsZXJzID0gW11cblxuICAvLyB0aGUgcHVibGljIEFQSSAoc2VlIHRoZSBtYWluIGRvY3MpXG4gIHZhciBfaW5zdGFuY2UgPSB7XG4gICAgYXQ6IGF0LFxuICAgIGdsb2JhbDogZ2xvYmFsLFxuICAgIGt2OiBrdixcbiAgICBuYW1lczoge30sXG4gICAgZW5kbGluZTogJ1xcbicsXG4gICAgc3VmZml4OiAnX19qMmMtJyArXG4gICAgICAvLyAxMjggYml0cyBvZiByYW5kb21uZXNzXG4gICAgICBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAweDEwMDAwMDAwMCkudG9TdHJpbmcoMzYpICsgJy0nICtcbiAgICAgIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDB4MTAwMDAwMDAwKS50b1N0cmluZygzNikgKyAnLScgK1xuICAgICAgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMHgxMDAwMDAwMDApLnRvU3RyaW5nKDM2KSArICctJyArXG4gICAgICBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAweDEwMDAwMDAwMCkudG9TdHJpbmcoMzYpLFxuICAgIHBsdWdpbnM6IFtdLFxuICAgIHNoZWV0OiBmdW5jdGlvbih0cmVlKSB7XG4gICAgICBfYmFja2VuZFswXS5pbml0KClcbiAgICAgIHJ1bGVzKFxuICAgICAgICBfd2Fsa2Vyc1swXSxcbiAgICAgICAgX2JhY2tlbmRbMF0sXG4gICAgICAgICcnLCAvLyBwcmVmaXhcbiAgICAgICAgdHJlZSxcbiAgICAgICAgMSwgIC8vIGxvY2FsLCBieSBkZWZhdWx0XG4gICAgICAgIDAgICAvLyBuZXN0aW5nIGRlcHRoXG4gICAgICApXG5cbiAgICAgIHJldHVybiBfYmFja2VuZFswXS5kb25lKClcbiAgICB9LFxuICAgIGlubGluZTogZnVuY3Rpb24gKHRyZWUsIG9wdGlvbnMpIHtcbiAgICAgIF9iYWNrZW5kWzFdLmluaXQoKVxuICAgICAgZGVjbGFyYXRpb25zKFxuICAgICAgICBfd2Fsa2Vyc1sxXSxcbiAgICAgICAgX2JhY2tlbmRbMV0sXG4gICAgICAgICcnLCAvLyBwcmVmaXhcbiAgICAgICAgdHJlZSxcbiAgICAgICAgIShvcHRpb25zICYmIG9wdGlvbnMuZ2xvYmFsKSAgIC8vIGxvY2FsLCBieSBkZWZhdWx0XG4gICAgICApXG4gICAgICByZXR1cm4gX2JhY2tlbmRbMV0uZG9uZSgpXG4gICAgfVxuICB9XG5cbiAgLy8gVGhlIGBzdGF0ZWAgKGZvciB0aGUgY29yZSBmdW5jdGlvbnMpIC8gYHdhbGtlcmAgKGZvciB0aGUgcGx1Z2lucykgdGFibGVzLlxuICB2YXIgX3dhbGtlcnMgPSBbXG4gICAgLy8gZm9yIGoyYy5zaGVldFxuICAgIHtcbiAgICAgIC8vIGhlbHBlcnMgZm9yIGxvY2FpemluZyBjbGFzcyBhbmQgYW5pbWF0aW9uIG5hbWVzXG4gICAgICBsb2NhbGl6ZVJlcGxhY2VyOiBfbG9jYWxpemVSZXBsYWNlciwgLy8gc2Vjb25kIGFyZ3VtZW50IHRvIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZVxuICAgICAgbG9jYWxpemU6IF9sb2NhbGl6ZSwgICAgICAgICAgICAgICAgIC8vIG1hbmdsZXMgbG9jYWwgbmFtZXNcbiAgICAgIG5hbWVzOiBfaW5zdGFuY2UubmFtZXMsICAgICAgICAgICAgICAvLyBsb2NhbCA9PiBtYW5nbGVkIG1hcHBpbmdcbiAgICAgIGF0cnVsZUhhbmRsZXJzOiBfYXRydWxlSGFuZGxlcnMsICAgICAgICAgICAgLy8gZXh0cmEgYXQtcnVsZXNcbiAgICAgIC8vIFRoZSBjb3JlIHdhbGtlciBtZXRob2RzLCB0byBiZSBwcm92aWRlZCB0byBwbHVnaW5zXG4gICAgICBhdHJ1bGU6IGF0UnVsZXMsXG4gICAgICBkZWNsOiBkZWNsYXJhdGlvbnMsXG4gICAgICBydWxlOiBydWxlc1xuICAgIH0sXG4gICAgLy8gbGlrZXdpc2UsIGZvciBqMmMuaW5saW5lIChpZGVtIHdpdGggYCRhYCwgYGFgIGFuZCBgc2AgcmVtb3ZlZClcbiAgICB7XG4gICAgICBsb2NhbGl6ZVJlcGxhY2VyOiBfbG9jYWxpemVSZXBsYWNlcixcbiAgICAgIGxvY2FsaXplOiBfbG9jYWxpemUsXG4gICAgICBuYW1lczogX2luc3RhbmNlLm5hbWVzLFxuICAgICAgZGVjbDogZGVjbGFyYXRpb25zXG4gICAgfVxuICBdXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsb2NhbGl6ZWQgdmVyc2lvbiBvZiBhIGdpdmVuIG5hbWUuXG4gICAqIFJlZ2lzdGVycyB0aGUgcGFpciBpbiBgaW5zdG5hY2UubmFtZWAgaWYgbmVlZGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIHRoZSBuYW1lIHRvIGxvY2FsaXplXG4gICAqIEByZXR1cm4ge3N0cmluZ30gLSB0aGUgbG9jYWxpemVkIHZlcnNpb25cbiAgICovXG4gIGZ1bmN0aW9uIF9sb2NhbGl6ZShuYW1lKSB7XG4gICAgaWYgKCFfaW5zdGFuY2UubmFtZXNbbmFtZV0pIF9pbnN0YW5jZS5uYW1lc1tuYW1lXSA9IG5hbWUgKyBfaW5zdGFuY2Uuc3VmZml4XG4gICAgcmV0dXJuIF9pbnN0YW5jZS5uYW1lc1tuYW1lXS5tYXRjaCgvXlxcUysvKVxuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYXMgc2Vjb25kIGFyZ3VtZW50IGZvciBzdHIucmVwbGFjZShsb2NhbGl6ZVJlZ2V4LCByZXBsYWNlcilcbiAgICogYGlnbm9yZWAsIGBnbG9iYWxgIGFuZCBgKGRvdCwgbmFtZSlgIGFyZSBtdXR1YWxseSBleGNsdXNpdmVcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1hdGNoIC0gdGhlIHdob2xlIG1hdGNoIChpZ25vcmVkKVxuICAgKiBAcGFyYW0ge3N0cmluZ3xudWxsfSBpZ25vcmUgLSBhIGNvbW1lbnQgb3IgYSBzdHJpbmcgbGl0ZXJhbFxuICAgKiBAcGFyYW0ge3N0cmluZ3xudWxsfSBnbG9iYWwgLSBhIGdsb2JhbCBuYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfG51bGx9IGRvdCAtIGVpdGhlciAnLicgZm9yIGEgbG9jYWwgY2xhc3MgbmFtZSBvciB0aGUgZW1wdHkgc3RyaW5nIG90aGVyd2lzZVxuICAgKiBAcGFyYW0ge3N0cmluZ3xudWxsfSBuYW1lIC0gdGhlIG5hbWUgdG8gbG9jYWxpemVcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgZnVuY3Rpb24gX2xvY2FsaXplUmVwbGFjZXIobWF0Y2gsIGlnbm9yZSwgZ2xvYmFsLCBkb3QsIG5hbWUpIHtcbiAgICByZXR1cm4gaWdub3JlIHx8IGdsb2JhbCB8fCBkb3QgKyBfbG9jYWxpemUobmFtZSlcbiAgfVxuXG4gIHZhciBfdXNlID0gZmxhdEl0ZXIoZnVuY3Rpb24ocGx1Z2luKSB7XG4gICAgLy8gYH5uYCBpcyBmYWxzeSBmb3IgYG4gPT09IC0xYCBhbmQgdHJ1dGh5IG90aGVyd2lzZS5cbiAgICAvLyBXb3JrcyB3ZWxsIHRvIHR1cm4gdGhlICByZXN1bHQgb2YgYGEuaW5kZXhPZih4KWBcbiAgICAvLyBpbnRvIGEgdmFsdWUgdGhhdCByZWZsZWN0cyB0aGUgcHJlc2VuY2Ugb2YgYHhgIGluXG4gICAgLy8gYGFgLlxuICAgIF9pbnN0YW5jZS5wbHVnaW5zLnB1c2gocGx1Z2luKVxuXG4gICAgaWYgKHR5cGUuY2FsbChwbHVnaW4pID09PSBGVU5DVElPTikgcGx1Z2luID0gcGx1Z2luKF9pbnN0YW5jZSlcblxuICAgIGlmICghcGx1Z2luKSByZXR1cm5cblxuICAgIGlmICh0eXBlLmNhbGwocGx1Z2luLmZpbHRlcikgPT09IEZVTkNUSU9OKSBfZmlsdGVycy5wdXNoKHBsdWdpbi5maWx0ZXIpXG5cbiAgICBpZiAodHlwZS5jYWxsKHBsdWdpbi5hdHJ1bGUpID09PSBGVU5DVElPTikgX2F0cnVsZUhhbmRsZXJzLnB1c2gocGx1Z2luLmF0cnVsZSlcblxuICAgIGlmICh0eXBlLmNhbGwocGx1Z2luLnNpbmspID09PSBGVU5DVElPTikgX2JhY2tlbmQgPSBwbHVnaW4uc2luaygpXG5cbiAgICBpZiAodHlwZS5jYWxsKHBsdWdpbi5uYW1lcykgPT09IE9CSkVDVCkgX2luc3RhbmNlLm5hbWVzID0gcGx1Z2luLm5hbWVzXG5cbiAgICBpZiAodHlwZS5jYWxsKHBsdWdpbi5zdWZmaXgpID09PSBTVFJJTkcpIF9pbnN0YW5jZS5zdWZmaXggPSBwbHVnaW4uc3VmZml4XG5cbiAgICBpZiAodHlwZS5jYWxsKHBsdWdpbi5wbHVnaW5zKSA9PT0gQVJSQVkpIF91c2UocGx1Z2luLnBsdWdpbnMpXG5cbiAgfSlcbiAgX3VzZShlbXB0eUFycmF5LnNsaWNlLmNhbGwoYXJndW1lbnRzKSlcblxuICBfYmFja2VuZFsxXSA9IF9iYWNrZW5kWzFdIHx8IHtcbiAgICBpbml0OiBfYmFja2VuZFswXS5pbml0LFxuICAgIGRvbmU6IF9iYWNrZW5kWzBdLmRvbmUsXG4gICAgcmF3OiBfYmFja2VuZFswXS5yYXcsXG4gICAgZXJyOiBfYmFja2VuZFswXS5lcnIsXG4gICAgZGVjbDogX2JhY2tlbmRbMF0uZGVjbFxuICB9XG5cbiAgLy8gZmluYWxpemUgdGhlIGJhY2tlbmQgYnkgbWVyZ2luZyBpbiB0aGUgZmlsdGVyc1xuICBmb3IodmFyIGkgPSAwOyBpIDwgMjsgaSsrKXsgLy8gMCBmb3IgajJjLnNoZWV0LCAxIGZvciBqMmMuaW5saW5lXG4gICAgZm9yICh2YXIgaiA9IF9maWx0ZXJzLmxlbmd0aDsgai0tOykge1xuICAgICAgX2JhY2tlbmRbaV0gPSBmcmVlemUoXG4gICAgICAgIGRlZmF1bHRzKFxuICAgICAgICAgIF9maWx0ZXJzW2pdKF9iYWNrZW5kW2ldLCAhIWkpLFxuICAgICAgICAgIF9iYWNrZW5kW2ldXG4gICAgICAgIClcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICBmcmVlemUoX2luc3RhbmNlKVxuICByZXR1cm4gX2luc3RhbmNlXG59XG4iXSwibmFtZXMiOlsiZ2xvYmFsIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQ0UsVUFBVSxHQUFHLEVBQUU7SUFDZixXQUFXLEdBQUcsRUFBRTtJQUNoQixJQUFJLEdBQUcsV0FBVyxDQUFDLFFBQVE7SUFDM0IsS0FBSyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQzlCLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMvQixNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7SUFDdEIsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQzFCLEdBQUcsSUFBSSxXQUFXLENBQUMsY0FBYztJQUNqQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sSUFBSSxTQUFTLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7OztBQUdsRCxTQUFTLFFBQVEsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFO0VBQ2hDLEtBQUssSUFBSSxDQUFDLElBQUksTUFBTSxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUU7SUFDN0MsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtHQUM1RDtFQUNELE9BQU8sTUFBTTtDQUNkOztBQUVELFNBQVMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7RUFDdEIsSUFBSSxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxD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